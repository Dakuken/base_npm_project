

backend end front = php smartie twig 
framework = react angular vue possible de les rendre via server
toute appli rendu 

Api rest 
CRUD  = endpoint url 
/ user / 2 
POST Protocole HTTP




CTCHER runInContext

GRAPPH MediaQueryList



booof 
RPC remote procedure all cole

book apointement 
après avoir apris api
https://api-platform.com/
pour php

très facile



php API rest // 

React -> HTTP -> Catch(router PHP) -> code business -> database

fonction bdd verification 


JAMstack

front end back 

javascript => 2 avantage tout est bon pour back et front
c'est plus demandé

angular => une manière de faire des applications web
styleguide de angular 


angular  en premier 
separation des concerns

-----------------------------
medium pour article tech 

fait pour le développement
realworld exemple apps

machine learning 
blockchain = systeme de timeseries = donnée créer tout savoir dessus
décentralisé 
ai 

salarial
immobilier 3-7%  moins grosse liquidité
bourse long terme 5-8 
bourse court termùe 10-30-40 mais -1000% possible mais grosse liquidité  
crypto +20+30+40 *10000 mais volatile de fous
investit jamais argent que t'aurais besoin
dividende, acheter action entreprise, cette entreprise reverse benefice. total = entreprise à dividende entre 5-7% par an
interet composé 
long terme 1 fois par mois tu achete tes actions et tout



console.log('file: prof.txt ~~ line 77 ~~ DC', DC)
DCA
EFFET DE LEVIER
INTERET composé interet qui genere de l'interet
STACKING


creer entreprise et s'inscrire sur 
Malt
Leveer
Fiveer
Comet
Talent.io
nexten.io

tarif prestation = facturé réalisation 
tarif horaire = facturé à l'horaire
1ere regle auto entreprise : 40% de ce q'uon facture on le voit pas
tarif petit site = 200 300 euros de la journée
tarif prestation c'est mieux
10 premier projet = monté en compétence

comment creer auto entreprise ?






à lire : 

Understanding ES6
Composing Software

3fn = 3 fois normale. = regle de structuration



Roadmap
Sujet a peaufiner :
- JAMstack
- API REST (puis HATEOAS/Hypermedia)
- GraphQL (option)
- Forme Normal SQL
Methodologie a maitrisé :
- Frontend: Atomic Design
- Backend: Domain Centric



Methodologie a maitrisé :
- Frontend: Atomic Design (aussi appelé Component Driven Development)
- Backend: Domain Centric 

Framework intéressant :
- Frontend: Angular PUIS React (angular pour la rigueur, React pour la vélocité)
- Styling: TailwindCSS
- Backend: NestJS (TS), API-platform (PHP)


optionnel
Sujet de Testing:
- TDD
- BDD (behavior driven development) -> apprendre tout ce qu'il y a sur cucumber.io


https://roadmap.sh/

rigeur de fou ==> passions






















Malt
Leveer
Fiveer
Comet
Talent.io
nexten.io
Livre a absolument lire (BIBLE)
- Understanding ES6
- Composing Software 
Sujet a peaufiner :
- JAMstack
- API REST (puis HATEOAS/Hypermedia)
- GraphQL (option)
- Forme Normal SQL savoir faire base de donnée
Methodologie a maitrisé : IMPORTANT 
- Frontend: Atomic Design (aussi appelé Component Driven Development) SUPER INTERESSANT 2x3 fois appliqué
- Backend: Domain Centric nouvel ere futur, belle architecture
Framework intéressant :
- Frontend: Angular PUIS React (angular pour la rigueur, React pour la vélocité) ok d'abord angular
- Styling: TailwindCSS super library
- Backend: NestJS (TS) ANGULar mais backend, API-platform (PHP) genere api
Sujet de Testing:
- TDD
- BDD (behavior driven development) -> apprendre tout ce qu'il y a sur cucumber.io // aprendre logic derriere
https://roadmap.sh/



faire des projet qu'on choisis ?
LIRE TOUT 
et apres faire